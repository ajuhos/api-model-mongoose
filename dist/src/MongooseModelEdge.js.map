{"version":3,"file":"MongooseModelEdge.js","sourceRoot":"","sources":["../../src/MongooseModelEdge.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    ApiEdge, ApiEdgeDefinition, ApiEdgeError, ApiEdgeQueryContext, ApiEdgeQueryResponse,\n    ApiEdgeQueryFilter, ApiEdgeQueryFilterType\n} from \"api-core\";\nimport * as mongoose from \"mongoose\";\nconst parse = require('obj-parse'),\n    deepKeys = require('deep-keys');\n\nexport class MongooseModelEdge<T extends mongoose.Document> extends ApiEdge implements ApiEdgeDefinition {\n\n    static defaultIdField = \"id\";\n    static defaultKeyField = \"_id\";\n\n    name = \"entry\";\n    pluralName = \"entries\";\n    idField = MongooseModelEdge.defaultIdField;\n    keyField = MongooseModelEdge.defaultKeyField;\n    provider: mongoose.Model<T>;\n\n    methods = [];\n    relations = [];\n    actions = [];\n\n    inspect = () => `/${this.pluralName}`;\n\n    private static applyFilter(item: any, filter: ApiEdgeQueryFilter) {\n        switch(filter.type) {\n            case ApiEdgeQueryFilterType.Equals:\n                item[filter.field] = filter.value;\n                break;\n            case ApiEdgeQueryFilterType.NotEquals:\n                item[filter.field] = { $ne: filter.value };\n                break;\n            case ApiEdgeQueryFilterType.GreaterThan:\n                item[filter.field] = { $gt: filter.value };\n                break;\n            case ApiEdgeQueryFilterType.GreaterThanOrEquals:\n                item[filter.field] = { $gte: filter.value };\n                break;\n            case ApiEdgeQueryFilterType.LowerThan:\n                item[filter.field] = { $lt: filter.value };\n                break;\n            case ApiEdgeQueryFilterType.LowerThanOrEquals:\n                item[filter.field] = { $lte: filter.value };\n                break;\n            default:\n                return false;\n        }\n    }\n\n    private applyFilters(item: any, filters: ApiEdgeQueryFilter[]) {\n        if(!filters.length) return true;\n        filters.forEach(filter => MongooseModelEdge.applyFilter(item, filter))\n    }\n\n    private static handleMongoError(e: Error): ApiEdgeError|Error {\n        if(e instanceof (mongoose as any).Error.ValidationError) {\n            return new ApiEdgeError(422, \"Unprocessable Entity\")\n        }\n        else {\n            return e;\n        }\n    }\n\n    private extractKey(body: any) {\n        if(!body) return null;\n        let id = body[this.keyField];\n        if(id) return { id, key: this.keyField };\n        if(!body.id && !body._id) return null;\n        id = body.id || body._id;\n        return { id, key: \"_id\" }\n    }\n\n    getEntry = (context: ApiEdgeQueryContext): Promise<ApiEdgeQueryResponse> => {\n        return new Promise((resolve, reject) => {\n            let queryString = { [this.keyField]: context.id };\n            this.applyFilters(queryString, context.filters);\n            let query = this.provider.findOne(queryString).lean();\n            if(context.fields.length) query.select(context.fields.join(' '));\n            if(context.populatedFields.length) query.populate(context.populatedFields.join(' '));\n\n            query.then(entry => {\n                resolve(new ApiEdgeQueryResponse(entry))\n            }).catch(e => reject(MongooseModelEdge.handleMongoError(e)));\n        })\n    };\n\n    listEntries = (context: ApiEdgeQueryContext): Promise<ApiEdgeQueryResponse> => {\n        return new Promise((resolve, reject) => {\n            let queryString = {};\n            this.applyFilters(queryString, context.filters);\n            let query = this.provider.find(queryString).lean();\n            if(context.fields.length) query.select(context.fields.join(' '));\n            if(context.populatedFields.length) query.populate(context.populatedFields.join(' '));\n            if(context.sortBy) {\n                let sortOptions: any = {};\n                context.sortBy.forEach((sort: any[]) => sortOptions[\"\"+sort[0]] = sort[1]);\n                query.sort(sortOptions);\n            }\n            if(context.pagination) {\n                query.limit(context.pagination.limit).skip(context.pagination.skip);\n                this.provider.count(queryString).then(count => {\n                    query.then(entries => {\n                        resolve(new ApiEdgeQueryResponse(entries, { pagination: { total: count } }))\n                    }).catch(e => reject(MongooseModelEdge.handleMongoError(e)));\n                }).catch(e => reject(MongooseModelEdge.handleMongoError(e)));\n            }\n            else {\n                query.then(entries => {\n                    resolve(new ApiEdgeQueryResponse(entries))\n                }).catch(e => reject(MongooseModelEdge.handleMongoError(e)));\n            }\n        })\n    };\n\n    createEntry = (context: ApiEdgeQueryContext, body: any): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            let query = this.provider.create(body);\n            query.then(entries => {\n                resolve(new ApiEdgeQueryResponse(entries))\n            }).catch(e => reject(MongooseModelEdge.handleMongoError(e)));\n        })\n    };\n\n    patchEntry = (context: ApiEdgeQueryContext, body: any): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            if(!context.id) {\n                let res = this.extractKey(body);\n                if(res == null) return reject(new ApiEdgeError(400, \"Missing ID\"));\n                context.id = res.id;\n            }\n\n            this.getEntry(context).then(resp => {\n                let entry = resp.data;\n                //TODO: Better deep extend?\n                deepKeys(body).map((key: any) => parse(key)).forEach((parsedKey: any) => parsedKey.assign(entry, parsedKey(body)));\n                let query =this.provider.update({ _id: entry._id||entry.id }, entry).lean();\n                query.then(() => {\n                    resolve(new ApiEdgeQueryResponse(entry))\n                }).catch(e => reject(MongooseModelEdge.handleMongoError(e)));\n            }).catch(reject)\n        })\n    };\n\n    updateEntry = (context: ApiEdgeQueryContext, body: any): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            if(!context.id) {\n                let res = this.extractKey(body);\n                if(res == null) return reject(new ApiEdgeError(400, \"Missing ID\"));\n                context.id = res.id;\n            }\n\n            this.getEntry(context).then(resp => {\n                let entry = resp.data;\n                Object.keys(body).forEach(key => entry[key] = body[key]);\n                let query =this.provider.update({ _id: entry._id||entry.id }, entry).lean();\n                query.then(() => {\n                    resolve(new ApiEdgeQueryResponse(entry))\n                }).catch(e => reject(MongooseModelEdge.handleMongoError(e)));\n            }).catch(reject)\n        })\n    };\n\n    updateEntries = (): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            reject(new ApiEdgeError(500, \"Not Supported\"))\n        })\n    };\n\n    removeEntry = (context: ApiEdgeQueryContext, body: any): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            if(!context.id) {\n                let res = this.extractKey(body);\n                if(res == null) return reject(new ApiEdgeError(400, \"Missing ID\"));\n                context.id = res.id;\n            }\n\n            this.getEntry(context).then(resp => {\n                let entry = resp.data;\n                let query = this.provider.remove({ [this.keyField]: context.id });\n                query.then(() => {\n                    resolve(new ApiEdgeQueryResponse(entry))\n                }).catch(e => reject(MongooseModelEdge.handleMongoError(e)))\n            }).catch(reject)\n        })\n    };\n\n    removeEntries = (): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            reject(new ApiEdgeError(500, \"Not Supported\"))\n        })\n    };\n\n    exists = (context: ApiEdgeQueryContext): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            let query = this.provider.findOne({ [this.keyField]: context.id }, 'id');\n            query.then(entry => {\n                resolve(new ApiEdgeQueryResponse(!!entry))\n            }).catch(e => reject(MongooseModelEdge.handleMongoError(e)));\n        })\n    }\n\n}\n"]}